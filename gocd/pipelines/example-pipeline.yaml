# More information on gocd-flavor YAML can be found here:
# - https://github.com/tomzo/gocd-yaml-config-plugin#pipeline
# - https://www.notion.so/sentry/GoCD-New-Service-Quickstart-6d8db7a6964049b3b0e78b8a4b52e25d
format_version: 10
environments:
    # Must start with "peanutbutter".
    peanutbutter-env:
        pipelines:
            - peanutbutter-pipeline
pipelines:
    peanutbutter-pipeline:
        environment_variables:
            # These values can be customized per-pipeline run
            # by clicking the run button with a plus sign.
            # If you'd like to generate encrypted values,
            # please refer to the Quickstart Guide.
            EXAMPLE_PIPELINE_VAR: "Example pipeline variable"
            # Read access to private repositories for the GoCD agent.
            GITHUB_TOKEN: "{{SECRET:[devinfra-github][token]}}"
        # Must start with "peanutbutter".
        group: peanutbutter
        lock_behavior: unlockWhenFinished
        materials:
            peanutbutter_repo:
                git: git@github.com:getsentry/peanutbutter.git
                shallow_clone: true
                destination: peanutbutter
                branch: main
        # A pipeline executes stages sequentially.
        stages:
            - first_stage:
                  fetch_materials: true
                  # Since this is the first stage,
                  # manual approval will block the pipeline from automatically
                  # being run when the materials change upstream.
                  approval:
                      type: manual
                  # A stage executes jobs in parallel.
                  jobs:
                      job_1:
                          timeout: 600 # 10 mins
                          # Must be exactly "peanutbutter".
                          elastic_profile_id: peanutbutter
                          # A job executes tasks sequentially.
                          tasks:
                              - script: |
                                    set -ex
                                    echo "Hello from the example pipeline"
                              - script: |
                                    set -ex
                                    echo "EXAMPLE_PIPELINE_VAR => ${EXAMPLE_PIPELINE_VAR}"
                                    echo "EXAMPLE_ENV_VAR => ${EXAMPLE_ENV_VAR}"
                      job_2:
                          timeout: 600
                          elastic_profile_id: peanutbutter
                          tasks:
                              # We generally recommend calling a script
                              # in your repository instead of writing
                              # multiline shell script here.
                              # See the following stage for an example.
                              - script: |
                                    set -ex
                                    cd "peanutbutter"
                                    ls -lah
            - second_stage:
                  approval:
                      type: manual
                      # Manual approval is only enabled if the previous stage
                      # succeeded.
                      allow_only_on_success: true
                  jobs:
                      run-demo-sh:
                          timeout: 600
                          elastic_profile_id: peanutbutter
                          tasks:
                              - exec:
                                  # NOTE: the command needs to start with ./
                                  command: ./peanutbutter/gocd/pipelines/demo.sh
                                  arguments:
                                  - foo
                                  - bar
